class Rule:
    def __init__(self, antecedent, consequent):
        self.antecedent = antecedent
        self.consequent = consequent
class KnowledgeBase:
    def __init__(self, rules):
        self.rules = rules
        self.facts = set()
    
    def add_fact(self, fact):
        self.facts.add(fact)
    
    def infer(self):
        while True:
            new_facts = set()
            for rule in self.rules:
                if all(antecedent in self.facts for antecedent in rule.antecedent):
                    new_facts.add(rule.consequent)
                    
            if not new_facts:
                break
            self.facts |= new_facts
            

if __name__ == "__main__":
    rules = [
        Rule(["A"], "B"),
        Rule(["B"], "C"),
        Rule(["C"], "D")
    ]
    kb = KnowledgeBase(rules)
    kb.add_fact("A")
    kb.infer()
    print("Facts inferred using Forward Chaining:", kb.facts)
