import heapq
class Node:
    def __init__(self, position, parent, g, h):
        self.position = position
        self.parent = parent
        self.g = g
        self.h = h
        self.f = g + h
    def __lt__(self, other):
        return self.f < other.f
def a_star(start, goal):
    open_set = []
    heapq.heappush(open_set, Node(start, None, 0, heuristic(start, goal)))
    closed_set = set()
    open_dict = {start: open_set[0]}
    while open_set:
        current = heapq.heappop(open_set)
        del open_dict[current.position]
        if current.position == goal:
            return reconstruct_path(current)
        closed_set.add(current.position)
        for neighbor in get_neighbors(current.position):
            if neighbor in closed_set:
                continue
            new_g = current.g + 1
            new_h = heuristic(neighbor, goal)
            new_node = Node(neighbor, current, new_g, new_h)
            if neighbor in open_dict:
                if new_g < open_dict[neighbor].g:
                    open_dict[neighbor].g = new_g
                    open_dict[neighbor].f = new_g + new_h
                    open_dict[neighbor].parent = current
            else:
                heapq.heappush(open_set, new_node)
                open_dict[neighbor] = new_node
    return None
def reconstruct_path(current):
    path = []
    while current is not None:
        path.append(current.position)
        current = current.parent
    path.reverse()
    return path
def heuristic(position, goal):
    return abs(position[0] - goal[0]) + abs(position[1] - goal[1])
def get_neighbors(position):
    neighbors = []
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # only horizontal and vertical movements
    for direction in directions:
        neighbor = (position[0] + direction[0], position[1] + direction[1])
        if 0 <= neighbor[0] < width and 0 <= neighbor[1] < height and grid[neighbor[0]][neighbor[1]] != 1:
            neighbors.append(neighbor)
    return neighbors
width = 10
height = 10
grid = [[0 for i in range(width)] for j in range(height)]
start = (0, 0)
goal = (9, 9)
path = a_star(start, goal)
if path is not None:
    print("Path found:", path)
else:
    print("No path found")
